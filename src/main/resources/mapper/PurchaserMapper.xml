<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mypms.mapper.PurchaserMapper">
    <insert id="addDemand" parameterType="com.example.mypms.model.ProcurementDemand">
        insert into pd(p_uid, product_name, amount, expire_time, start_time, remark)
        values (#{p_uid}, #{product_name}, #{amount}, #{expire_time}, #{start_time}, #{remark})
    </insert>

    <select id="getDemandsByUid" resultType="com.example.mypms.model.ProcurementDemand">
        select pdid,
               p_uid,
               product_name,
               amount,
               expire_time,
               start_time,
               remark,
               uid as p_uid,
               uname
        from pd
                 inner join purchaser p on pd.p_uid = p.uid
        where expire_time > now()
          and p_uid = #{p_uid}
        limit #{size} offset #{offset}
    </select>

    <select id="getDemandsCountByUid" resultType="int" parameterType="String">
        select count(*)
        from pd
        where p_uid = #{p_uid}
          and expire_time > now()
    </select>

    <delete id="deleteDemand">
        delete
        from pd
        where pdid = #{pdid}
          and expire_time > now()
          and p_uid = #{p_uid}
    </delete>

    <select id="getQuotesByPdid" resultType="com.example.mypms.model.Quote">
        select qid, p_id, v_uid, uname, t.amount as amount, total_price, t.remark as remark
        from (select *
              from quote
                       inner join vendor v on quote.v_uid = v.uid) as t
                 inner join pd on pd.pdid = t.p_id
        where p_id = #{pdid}
          and pd.expire_time > now()
        limit #{size} offset #{offset}
    </select>

    <select id="isDemandBelongToPurchaser" resultType="int">
        select count(*)
        from pd
        where pdid = #{pdid}
          and p_uid = #{p_uid}
    </select>

    <select id="getQuotesCountByPdid" resultType="int">
        select count(*)
        from quote
        where p_id = #{pdid}
    </select>

    <delete id="deleteOtherQuotesByPdidAndQid">
        delete
        from quote
        where p_id = #{pdid}
          and qid != #{qid}
    </delete>

    <update id="invalidDemandByPdidAndUid">
        update pd
        set expire_time = now()
        where pdid = #{pdid}
          and p_uid = #{p_uid}
    </update>

    <select id="getProcurementsByUid" resultType="com.example.mypms.model.Procurement">
        select pid,
               qid,
               pdid,
               status,
               start_time,
               v_uid,
               v_name,
               product_name,
               amount,
               total_price,
               cname,
               cpath,
               cexpire_time,
               remark
        from processing
        where p_uid = #{p_uid}
          and status > 0
          and 7 > processing.status
        limit #{size} offset #{offset}
    </select>

    <select id="getProcurementsCountByUid" resultType="int">
        select count(*)
        from processing
        where p_uid = #{p_uid}
          and status > 0
          and 7 > processing.status
    </select>

    <select id="getVendorByUid" resultType="com.example.mypms.model.Vendor">
        select uid, uname, email, phone, address, rate, rate_num
        from vendor
        where uid = #{uid}
        limit 1
    </select>

    <insert id="addProcurement" parameterType="com.example.mypms.model.Procurement">
        insert into procurement (qid, start_time, cname, cpath, cexpire_time)
        values (#{qid}, #{start_time}, #{cname}, #{cpath}, #{cexpire_time})
    </insert>

    <select id="getPdidByQidAndUid" resultType="int">
        select pdid
        from pd
                 inner join quote on pd.pdid = quote.p_id
        where qid = #{qid}
          and p_uid = #{uid}
    </select>

    <delete id="deleteAllQuotesByPdid">
        delete
        from quote
        where p_id = #{pdid}
    </delete>

    <select id="getStatusByPidAndUid" resultType="int">
        select status
        from processing
        where pid = #{pid}
          and p_uid = #{uid}
    </select>

    <update id="updateContract">
        update procurement
        set cname        = #{filename},
            cpath        = #{path},
            cexpire_time = #{expire_time},
            status       = 2,
            csize        = #{file_size}
        where pid = #{pid}
    </update>

    <select id="getContractPathAndName" parameterType="int" resultType="com.example.mypms.model.Contract">
        select cpath as path, cname as name
        from procurement
        where pid = #{pid}
    </select>

    <delete id="deleteProcurement">
        delete
        from procurement
        where pid = #{pid}
          and status = 3
    </delete>

    <select id="getProcurementsCountByPidAndUid">
        select count(*)
        from processing
        where pid = #{pid}
          and p_uid = #{uid}
          and status > 0
    </select>

    <update id="nextStep">
        update procurement
        set status = #{current_status} + 1
        where pid = #{pid}
          and status = #{current_status}
    </update>

    <select id="getVuidByPid" resultType="java.lang.String">
        select v_uid
        from processing
        where pid = #{pid}
          and status > 0
          and 7 > processing.status
    </select>

    <update id="updateRate">
        update vendor
        set rate     = (rate * rate_num + #{rate}) / (rate_num + 1),
            rate_num = rate_num + 1
        where uid = #{uid}
    </update>

    <update id="finishProcurement">
        update procurement
        set status = -1
        where pid = #{pid}
    </update>

    <select id="getPurchaserRate" resultType="float">
        select rate
        from purchaser
        where uid = #{uid}
        limit 1
    </select>

    <select id="getChartData" resultType="com.example.mypms.model.LineChartData">
        select t2.label as `label`, coalesce(counts, 0) as `count`
        from (select cast(t.start_time as DATE) as label, count(*) as counts
              from (select quote.qid,
                           quote.p_id,
                           quote.v_uid,
                           quote.amount,
                           quote.total_price,
                           quote.remark,
                           quote.start_time,
                           p.p_uid
                    from quote
                             inner join pd p on quote.p_id = p.pdid
                    where quote.start_time > date_sub(now(), INTERVAL 7 DAY)) as t
              where t.p_uid = #{uid}
              group by day(t.start_time)) as t1
                 right join
             (select DATE_SUB(curdate(), INTERVAL 0 DAY) label
              union
              select DATE_SUB(curdate(), INTERVAL 1 DAY) label
              union
              select DATE_SUB(curdate(), INTERVAL 2 DAY) label2
              union
              select DATE_SUB(curdate(), INTERVAL 3 DAY) label3
              union
              select DATE_SUB(curdate(), INTERVAL 4 DAY) label4
              union
              select DATE_SUB(curdate(), INTERVAL 5 DAY) label5
              union
              select DATE_SUB(curdate(), INTERVAL 6 DAY) label6) as t2 on t1.label = t2.label
        order by label
    </select>

    <select id="getAllQuotesCountByUid" resultType="int">
        select count(*)
        from (select quote.qid,
                     p_id,
                     quote.v_uid,
                     quote.amount,
                     quote.total_price,
                     quote.remark,
                     quote.start_time,
                     pdid,
                     p_uid,
                     product_name,
                     expire_time
              from quote
                       inner join pd p on quote.p_id = p.pdid) as t
                 inner join pd on pd.pdid = t.p_id
        where t.p_uid = #{uid}
          and pd.expire_time > now()
    </select>

    <select id="getStatusCount" resultType="com.example.mypms.model.StatusCount">
        select sum(if(status = 1, 1, 0))                          as `one`,
               sum(if(status = 2, 1, 0))                          as `two`,
               sum(if(status = 3, 1, 0))                          as `three`,
               sum(if(status = 4, 1, 0))                          as `four`,
               sum(if(status = 5, 1, 0))                          as `five`,
               sum(if(status = 6, 1, 0))                          as `six`,
               sum(if(status = 7, 1, 0))                          as `seven`,
               sum(if(status > 7 or 1 > processing.status, 1, 0)) as `finished`
        from processing
        where p_uid = #{p_uid}
    </select>

    <select id="getNeedActionProcurement" resultType="com.example.mypms.model.Procurement">
        select pid,
               qid,
               pdid,
               status,
               start_time,
               p_uid,
               p_name,
               product_name,
               amount,
               total_price,
               cname,
               cpath,
               cexpire_time,
               remark
        from processing
        where v_uid = #{v_uid}
          and status in (1, 3, 5, 6)
        limit 6
    </select>

    <select id="getLatestQuotesByPid" resultType="com.example.mypms.model.ProcurementDemand">
        select qid             as pdid,
               pd.product_name as product_name,
               t.amount        as amount,
               expire_time,
               start_time,
               t.remark        as remark,
               pd.p_uid        as p_uid,
               v_uname         as uname
        from (select qid,
                     p_id,
                     v_uid,
                     uname,
                     amount,
                     total_price,
                     remark,
                     v.uname as v_uname
              from quote
                       inner join vendor v on quote.v_uid = v.uid) as t
                 inner join pd on pdid = t.p_id
        where pd.p_uid = #{p_uid}
          and pd.expire_time > now()
        order by start_time DESC
        limit 6
    </select>
</mapper>